#+title: Qtile Config
#+PROPERTY: header-args :tangle config.py
#+auto_tangle: t

* Table of Contents :toc:
- [[#about-this-config][About this Config]]
- [[#imports][Imports]]
- [[#variables][Variables]]
- [[#autostart][Autostart]]
- [[#colors][Colors]]
- [[#keybindings][Keybindings]]
- [[#layouts][Layouts]]
- [[#widget-defaults][Widget Defaults]]
- [[#screens-and-widgets][Screens and Widgets]]
- [[#mouse-settings][Mouse Settings]]
- [[#floating-rules][Floating Rules]]
- [[#window-settings][Window Settings]]
- [[#java-programs-migh-need-this][Java Programs Migh need this]]

* About this Config
Qtile is a dynamic, tiling window manager written and configured in Python

This is the Qtile config of Envixty (redkittty on Github)

My Personal Site: https://redkittty.github.io

My Github: https://github.com/redkittty

My Mastodon (mastodon.social): https://mastodon.social/@envixty

These Configs Are Made specifically for me and this is just a well documented way of doing this config

Here is a screenshot of my config:

[[https://github.com/redkittty/dotfiles/blob/main/.screenshots/qtile.png]]

* Imports
These are necassary librariies that need to be loaded

ALSO, THIS CONFIG NEEDS QTILE-EXTRAS

#+begin_src python
# NOTICE: IF YOU WANT TO EDIT THIS CONFIG, EDIT IT THROUGH README.org, NOT THROUGH config.py
import os
import subprocess

from libqtile import bar, layout, qtile, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen, KeyChord
from libqtile.lazy import lazy
# YOU NEED QTILE-EXTRAS
from qtile_extras import widget
from qtile_extras.widget.decorations import BorderDecoration
# Distrotube's Colors Library
import colors
#+end_src

* Variables
This area defines shorter names for terminal commands

#+begin_src python
terminal = "kitty"
browser = "brave"
steam = "steam"
emacs = "emacsclient -c -a 'emacs'"

## ROFI ##
launcher = "rofi -show drun"
emoji = "rofi -show emoji"
power = "powermenu.sh"
#+end_src

* Autostart
This section is a hook for a script that starts when Qtile is loaded at boot

#+begin_src python
@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.Popen([home])
#+end_src

* Colors
This section defines which colorscheme to use from Distrotube's Colors Library

| Available Themes             |
|------------------------------|
| colors.DoomOne               |
| colors.Dracula               |
| colors.GruvboxDark (default) |
| colors.MonokaiPro            |
| colors.Nord                  |
| colors.OceanicNext           |
| colors.Palenight             |
| colors.SolarizedDark         |
| colors.SolarizedLight        |
| colors.TomorrowNight         |

#+begin_src python
colors = colors.GruvboxDark
#+end_src

* Keybindings
This section defines keybindings for Qtile

| Keybinding          | Description                             |
|---------------------+-----------------------------------------|
| [S]+[Arrow]         | Moves Focus                             |
| [S]+(Shift)+[Arrow] | Moves Window                            |
| [S]+(Ctrl)+[Arrow]  | Changes Window Size                     |
| [S]+Space           | Moves Focus to Other Window             |
| [S]+n               | Resets Window Sizes                     |
| [S]+(Shift)+ENTER   | Toggles between Split and Unsplit stack |
| [S]+TAB             | Toggles between layouts                 |
| [S]+c               | Kills focused window                    |
| [S]+f               | Toggles fullscreen                      |
| [S]+v               | Toggles floating                        |
| [S]+(Ctrl)+r        | Reloads Config                          |
| [S]+(Ctrl)+q        | Exits Qtile                             |
| [S]+1-9             | Moves Focus to Workspace 1-9            |
| [S]+(Shift)+1-9     | Moves Window to Workspace 1-9           |
|---------------------+-----------------------------------------|
| [S]+ENTER           | Opens Terminal (Kitty)                  |
| [S]+b               | Launches Web Browser (Brave)            |
| [S]+t               | Opens Emacs                             |
| [S]+g               | Launches Steam                          |
| [S]+r               | Opens Rofi Application Launcher         |
| [S]+e               | Opens Rofi Emoji Picker                 |
| [S]+p               | Opens Rofi Power Menu Script            |
| [S]+(Print)         | Takes Screenshot of primary monitor     |


#+begin_src python
mod = "mod4"
keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "b", lazy.spawn(browser), desc="Launch web browser"),
    Key([mod], "t", lazy.spawn(emacs), desc="Launch Emacs"),
    Key([mod], "g", lazy.spawn(steam), desc="Launch Steam"),
    Key([mod], "Print", lazy.spawn("flameshot screen -n 1"), desc="Takes Screenshot of Primary Monitor"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "c", lazy.window.kill(), desc="Kill focused window"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window",
    ),
    Key([mod], "v", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),

    ## ROFI ##
    Key([mod], "r", lazy.spawn(launcher), desc="Rofi Run Launcher"),
    Key([mod], "e", lazy.spawn(emoji), desc="Rofi Emoji Picker"),
    Key([mod], "p", lazy.spawn(power), desc="Rofi Power Menu"),

    # Volume Control
    Key([], "XF86AudioRaiseVolume", lazy.spawn("wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-")),
    Key([], "XF86AudioMute", lazy.spawn("wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle")),
]

# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )


groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + group number = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + group number = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + group number = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

#+end_src

* Layouts
This section defines the layouts used by Qtile,

To use a layout, simply uncomment the line with the layout

#+begin_src python
layouts = [
    layout.Columns(border_focus_stack = colors[2], border_width = 4),
    layout.Tile(border_focus_stack = colors[2], border_width = 4),
    layout.Max(border_focus_stack = colors[2], border_width = 4),
    # layout.Stack(num_stacks=2),
    # layout.Bsp(border_focus_stack = colors[2], border_width = 4),
    # layout.Matrix(border_focus_stack = colors[2], border_width = 4),
    layout.MonadTall(border_focus_stack = colors[2], border_width = 4),
    # layout.MonadWide(border_focus_stack = colors[2], border_width = 4),
    # layout.RatioTile(border_focus_stack = colors[2], border_width = 4),
    # layout.TreeTab(border_focus_stack = colors[2], border_width = 4),
    # layout.VerticalTile(border_focus_stack = colors[2], border_width = 4**layout_theme),
    # layout.Zoomy(border_focus_stack = colors[2], border_width = 4),
]
#+end_src

* Widget Defaults
This section defines defaults for all widgets on the bar

#+begin_src python
widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
    background=colors[0]
)
extension_defaults = widget_defaults.copy()
#+end_src

* Screens and Widgets
This section defines what should be shown on each screen and the widgets on the bar

#+begin_src python
screens = [
    Screen(
        wallpaper='~/.local/share/wall/wall5.jpg',
        wallpaper_mode='stretch',
        top=bar.Bar(
            [
                widget.GroupBox(
                    fontsize = 11,
                    margin_y = 5,
                    margin_x = 5,
                    padding_y = 0,
                    padding_x = 1,
                    borderwidth = 3,
                    active = colors[8],
                    inactive = colors[1],
                    rounded = False,
                    highlight_color = colors[2],
                    highlight_method = "line",
                    this_current_screen_border = colors[7],
                    this_screen_border = colors [4],
                    other_current_screen_border = colors[7],
                    other_screen_border = colors[4],
                ),
                widget.TextBox(
                    text = '|',
                    font = "Ubuntu Mono",
                    foreground = colors[1],
                    padding = 2,
                    fontsize = 14
                ),
                widget.Prompt(),
                widget.WindowName(
                    foreground = colors[6],
                    max_chars = 40
                ),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.Spacer(length = 8),
                widget.KeyboardLayout(
                    foreground = colors[1],
                    fmt = '   KEY:  {}',
                    decorations=[
                        BorderDecoration(
                            colour = colors[1],
                            border_width = [0, 0, 2, 0],
                        )
                    ],
                ),
                widget.Spacer(length = 8),
                widget.CPU(
                    format = '   CPU: {load_percent}%',
                    foreground = colors[3],
                    mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(terminal + ' -e htop')},
                    decorations=[
                        BorderDecoration(
                            colour = colors[3],
                            border_width = [0, 0, 2, 0],
                        )
                    ],
                ),
                widget.Spacer(length = 8),
                widget.Memory(
                    foreground = colors[5],
                    mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(terminal + ' -e htop')},
                    format = '{MemUsed: .0f}{mm}',
                    fmt = '  MEM: {} used',
                    decorations=[
                        BorderDecoration(
                            colour = colors[5],
                            border_width = [0, 0, 2, 0],
                        )
                    ],
                ),
                widget.Spacer(length = 8),
                widget.Clock(
                    format="   TIME: %a, %b, %d - %I:%M %p",
                    foreground = colors[8],
                    decorations=[
                        BorderDecoration(
                            colour = colors[8],
                            border_width = [0, 0, 2, 0],
                        )
                    ],

                ),
                widget.Spacer(length = 8),
                widget.CurrentLayoutIcon(
                    # custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                    padding = 4,
                    scale = 0.6,
                    decorations=[
                        BorderDecoration(
                            colour = colors[1],
                            border_width = [0, 0, 2, 0],
                        )
                    ],
                ),
                widget.CurrentLayout(
                    decorations=[
                        BorderDecoration(
                            colour = colors[1],
                            border_width = [0, 0, 2, 0],
                        )
                    ],
                ),
                widget.Spacer(length = 6),

            ],
            27,
        ),
    ),
    Screen(
        wallpaper="~/.local/share/wall/wall5.jpg",
        wallpaper_mode="stretch",

    ),
]
#+end_src

* Mouse Settings
This section defines settings for the Mouse along with Mouse Bindings

#+begin_src python
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
#+end_src

* Floating Rules
This section defines which windows are floating by default

#+begin_src python
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
#+end_src

* Window Settings
This section is settings for Windows in Qtile

#+begin_src python
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None
#+end_src

* Java Programs Migh need this

XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this

string besides java UI toolkits; you can see several discussions on the

mailing lists, GitHub issues, and other WM documentation that suggest setting

this string if your java app doesn't work correctly. We may as well just lie

and say that we're a working one by default.


We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in

java that happens to be on java's whitelist.

#+begin_src python
wmname = "LG3D"
#+end_src
