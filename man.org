#+title: Manual for Dotfiles
#+author: Envixty (redkittty on Github)
#+startup: showeverything

[[https://github.com/redkittty/dotfiles/blob/main/.screenshots/dotfiles1.png]]

* Note
Even though there is a Hyprland Config, The AwesomeWM config is the only one recieving updates

* AwesomeWM
After you applied my dotfiles, you need to restart AwesomeWM by doing

[SUPER] + [CTRL] + r

Here are some of the changes I made to my config:

** General
1. Clock is AM/PM
2. Calender available
3. No Tilebars

** Keybindings
*** General
[SUPER] + s                       Shows all available keybindings

[SUPER] + [CTRL] + r              Restarts AwesomeWM (Use when changing config)

[SUPER] + [SHIFT] + q             Returns to login-manager

*** Applications
[SUPER] + [RETURN]                Opens terminal (kitty)

[SUPER] + b                       Opens firefox

[SUPER] + t                       Opens Emacs Client

[SUPER] + G                       Opens Steam

[SUPER] + r                       Opens Run Launcher (rofi)

[SUPER] + =                       Opens Calculator Prompt (rofi)

[SUPER] + e                       Opens Emoji Picker (rofi)

[SUPER] + w                       Opens Wifi Menu (rofi)

[SUPER] + p                       Opens Power Menu (rofi)

[SUPER] + [TAB]                   Opens Window Switcher (rofi)

*** Windows/Workspaces
[SUPER] + j/k                     Moves Window Focus

[SUPER] + [CTRL] + [j/k]          Moves Monitor Focus

[SUPER] + [SHIFT] + [hjkl]        Moves Window

[SUPER] + [1-9]                   Moves Workspace Focus

[SUPER] + [SHIFT] + [1-9]         Moves Window to different Workspace

[SUPER] + o                       Moves Window to another monitor

[SUPER] + v                       Toggles Window Floating

[SUPER] + [SPC]                   Switches Window Layout

[SUPER] + [CTRL] + [RETURN]       Sends Window to Master

[SUPER] + f                       Makes Window Fullscreen

[SUPER] + m                       Maximizes Window

[SUPER] + n                       Minimizes Window

* Fish
Here is some things from my fish config:

** Aliases
*** General
neofetch = "neowofetch"           Displays updated version of Neofetch

sudo = "doas"                     Makes sudo use doas (A less bloated version of sudo)

doas = "doas --"                  Doas, the less bloated version of sudo

rr                                Does the Terminal rickroll (command too long for this format)

top = "htop"                      Makes top open htop

egrep = "grep -E"                 Muscle Memory alias for long-time users

fgrep = "grep -F"                 Muscle Memory alias for long-time users

icat = "kitten icat"              Uses the kitten icat (for displaying images) inside of the kitty terminal

(1-9). = "cd .."                  Goes back a directory (Based on number, ex 1. goes back 1 directory while 9. goes back 9 directories)

~ = "cd ~"                        Goes to home directory

c- = "cd -"                       Goes to previous directory

*** Pacman Package Manager
pacsyu = "doas pacman -Syyu"      Makes pacman syncronize packages, update packages, and install packages

pacsy = "doas pacman -Syy"        Makes pacman syncronize packages, and install packages

pacs = "doas pacman -S"           Makes pacman install packages

pacrem = "doas pacman -R"         Removes package

pacrems = "doas pacman -Rs"       Removes package and it's dependencies

*** Text Editors
vi = "nvim"                       Opens neovim with vi

vim = "nvim"                      Opens neovim with vim

em = "emacsclient -c -a 'emacs'"  Opens emacs client in new window

emt = "emacs -nw"                 Opens emacs in the terminal

*** Code/Rust
rs = "cd ~/Documents/Code/Rust"   Changes to rust project directory

co = "cd ~/Documents/Code"        Changes to code directory

**** Cargo Compiler
rbr = "cargo build --release"   Makes cargo build a release binary

rbd = "cargo build"             Makes cargo just build a binary (defaults to debug flag)

rcr = "cargo run"               Makes cargo build a binary and run it right after

rpr = "cd target/release"       Changes directory to where the release binary is

rpd = "cd target/debug"         Changes directory to where the debug binary is

** Functions
ex:
#+begin_src fish
function ex
    if [ -z "$argv" ]
        # Display usage if no parameters given
        echo "Usage: ex <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    else
        for n in $argv
            if test -f "$n"
                switch "$n"
                    case '*.cbt' '*.tar.bz2' '*.tar.gz' '*.tar.xz' '*.tbz2' '*.tgz' '*.txz' '*.tar'
                        tar xvf "$n"
                    case '*.lzma'
                        unlzma ./"$n"
                    case '*.bz2'
                        bunzip2 ./"$n"
                    case '*.cbr' '*.rar'
                        unrar x -ad ./"$n"
                    case '*.gz'
                        gunzip ./"$n"
                    case '*.cbz' '*.epub' '*.zip'
                        unzip ./"$n"
                    case '*.z'
                        uncompress ./"$n"
                    case '*.7z' '*.arj' '*.cab' '*.cb7' '*.chm' '*.deb' '*.dmg' '*.iso' '*.lzh' '*.msi' '*.pkg' '*.rpm' '*.udf' '*.wim' '*.xar'
                        7z x ./"$n"
                    case '*.xz'
                        unxz ./"$n"
                    case '*.exe'
                        cabextract ./"$n"
                    case '*.cpio'
                        cpio -id < ./"$n"
                    case '*.cba' '*.ace'
                        unace x ./"$n"
                    case '*'
                        echo "ex: '$n' - unknown archive method"
                        return 1
                end
            else
                echo "'$n' - file does not exist"
                return 1
            end
        end
    end
end

#+end_src

Extracts a file depending on what archival type is used

backup
#+begin_src fish
function backup --argument filename
    cp $filename $filename.bak
end
#+end_src

Backups a file

** Prompt
Uses [[https://starship.rs/][Starship]], A cross-shell prompt

* Doom Emacs

idk what to put here
